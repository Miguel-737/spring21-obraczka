Name:            'Avalos, Miguel'
CruzID:          'miaavalo'
Commit Graded:   '807613b5bd00cddbb29ca3e824f5ae6fb41f60cd'
Late Days Used:  2
Score:           96.00/100


Functional (56/60)

Design Document (18/18)
    -Project Description    (3/3)
    -Program Logic          (3/3)
    -Data Structures        (3/3)
    -Functions              (3/3)
    -Questions              (3/3)
    -Testing                (3/3)

Code Style (5/5)


Functional Tests Output:

========> Checking asgn3 now (2021-06-12 20:42:53.281332) ==================================
------ Checking for files before running commands ------
Files OK
----- Running commands:
cd asgn3; echo '-- Files in asgn3 --' ; ls ; echo '-- Running make --' ; make
------ Command output ------
-- Files in asgn3 --
DESIGN.pdf
httpproxy.c
Makefile
README.md
-- Running make --
gcc -c -std=c99 -Wall -Wextra -Wpedantic -Wshadow httpproxy.c
gcc -o httpproxy httpproxy.o
chmod +x httpproxy
------ End command output ------
------ Checking for files after running commands ------
Files OK
.......................................................
++++ Your submission has met minimum requirements for assignment asgn3.
++++ You may submit commit ID 807613b5bd00cddbb29ca3e824f5ae6fb41f60cd for asgn3.
.......................................................
<======== Done checking asgn3 (2021-06-12 20:42:53.352700)


========> Running test script for asgn3 (2021-06-12 20:42:53.352804) <================
--> Building ...succeeded!
--------> Running asgn3.test.01 (Test if httpproxy can GET a small file.) ... SUCCESS!
<- Run of asgn3.test.01 complete ----------

--------> Running asgn3.test.02 (Test if httpproxy can GET a large file.) ... SUCCESS!
<- Run of asgn3.test.02 complete ----------

--------> Running asgn3.test.03 (Test if httpproxy can PUT a small file.) ... SUCCESS!
<- Run of asgn3.test.03 complete ----------

--------> Running asgn3.test.04 (Test if httpproxy can PUT a large file.) ... SUCCESS!
<- Run of asgn3.test.04 complete ----------

--------> Running asgn3.test.05 (Test if httpproxy can process a HEAD request.) ... SUCCESS!
<- Run of asgn3.test.05 complete ----------

--------> Running asgn3.test.06 (Test if httpproxy caches a small file.) ... SUCCESS!
<- Run of asgn3.test.06 complete ----------

--------> Running asgn3.test.07 (Test if httpproxy does FIFO updating.) ... SUCCESS!
<- Run of asgn3.test.07 complete ----------

--------> Running asgn3.test.08 (Test if httpproxy can handle a 400 error.) ... SUCCESS!
<- Run of asgn3.test.08 complete ----------

--------> Running asgn3.test.09 (Test if httpproxy can handle a 404 error.) ... SUCCESS!
<- Run of asgn3.test.09 complete ----------

--------> Running asgn3.test.10 (Test if httpproxy does LRU updating.) ... SUCCESS!
<- Run of asgn3.test.10 complete ----------

--------> Running asgn3.test.11 (Test if httpproxy ignores files larger than the limit -- test with small files (check first if cache works).) ... SUCCESS!
<- Run of asgn3.test.11 complete ----------

--------> Running asgn3.test.12 (Check if cache works with larger files (> 32KiB)) ... SUCCESS!
<- Run of asgn3.test.12 complete ----------

--------> Running asgn3.test.13 (Test if httpproxy correctly replaces files in FIFO mode (large files).) ... SUCCESS!
<- Run of asgn3.test.13 complete ----------

--------> Running asgn3.test.14 (Test if httpproxy correctly replaces files in LRU mode (large files).) ... SUCCESS!
<- Run of asgn3.test.14 complete ----------

--------> Running asgn3.test.15 (Check if cache updates files after changes.) ... SUCCESS!
<- Run of asgn3.test.15 complete ----------

--------> Running asgn3.test.16 (Check interactions of updates and FIFO.) ... SUCCESS!
<- Run of asgn3.test.16 complete ----------

--------> Running asgn3.test.17 (Check interactions of updates and LRU.) ... SUCCESS!
<- Run of asgn3.test.17 complete ----------

--------> Running asgn3.test.18 (Test cache dropping content when new version is too large.) ... failure!
stdout (first 0 characters):

====
stderr (first 200 characters):

====
<- Run of asgn3.test.18 complete ----------

--------> Running asgn3.test.19 (Test if cache ignores older files.) ... SUCCESS!
<- Run of asgn3.test.19 complete ----------

--------> Running asgn3.test.20 (Test transfer of an empty file.) ... SUCCESS!
<- Run of asgn3.test.20 complete ----------

--------> Running asgn3.test.21 (Test if cache can hold an empty file.) ... SUCCESS!
<- Run of asgn3.test.21 complete ----------

--------> Running asgn3.test.22 (Test if httpproxy updates cache (new version much larger, but inside limit).) ... SUCCESS!
<- Run of asgn3.test.22 complete ----------

--------> Running asgn3.test.23 (Test cache with a differently sized files (small, large, empty).) ... SUCCESS!
<- Run of asgn3.test.23 complete ----------

--------> Running asgn3.test.24 (Test caching of many files under FIFO.) ... SUCCESS!
<- Run of asgn3.test.24 complete ----------

--------> Running asgn3.test.25 (Test caching of many files under LRU.) ... SUCCESS!
<- Run of asgn3.test.25 complete ----------

--------> Running asgn3.test.26 (Test default values.) ... SUCCESS!
<- Run of asgn3.test.26 complete ----------

-------- SCORES --------
what,total,asgn3.test.01,asgn3.test.02,asgn3.test.03,asgn3.test.04,asgn3.test.05,asgn3.test.06,asgn3.test.07,asgn3.test.08,asgn3.test.09,asgn3.test.10,asgn3.test.11,asgn3.test.12,asgn3.test.13,asgn3.test.14,asgn3.test.15,asgn3.test.16,asgn3.test.17,asgn3.test.18,asgn3.test.19,asgn3.test.20,asgn3.test.21,asgn3.test.22,asgn3.test.23,asgn3.test.24,asgn3.test.25,asgn3.test.26
MaxPoints,60,3,2,3,2,3,2,2,2,2,2,2,2,2,2,1,1,2,0,2,1,3,4,3,3,3,2
Score,56,3,2,3,2,3,2,2,2,2,2,2,2,2,2,1,1,2,0,2,1,3,4,3,3,3,2
-------- END_SCORES --------
